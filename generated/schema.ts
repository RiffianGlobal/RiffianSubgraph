// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Album extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Album entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Album must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Album", id.toString(), this);
    }
  }

  static load(id: string): Album | null {
    return changetype<Album | null>(store.get("Album", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalVotes(): i32 {
    let value = this.get("totalVotes");
    return value!.toI32();
  }

  set totalVotes(value: i32) {
    this.set("totalVotes", Value.fromI32(value));
  }

  get rewardPoolAmount(): BigInt {
    let value = this.get("rewardPoolAmount");
    return value!.toBigInt();
  }

  set rewardPoolAmount(value: BigInt) {
    this.set("rewardPoolAmount", Value.fromBigInt(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get lastVoteAt(): i32 {
    let value = this.get("lastVoteAt");
    return value!.toI32();
  }

  set lastVoteAt(value: i32) {
    this.set("lastVoteAt", Value.fromI32(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value!.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get fans(): Array<string> | null {
    let value = this.get("fans");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set fans(value: Array<string> | null) {
    if (!value) {
      this.unset("fans");
    } else {
      this.set("fans", Value.fromStringArray(<Array<string>>value));
    }
  }

  get fansNumber(): i32 {
    let value = this.get("fansNumber");
    return value!.toI32();
  }

  set fansNumber(value: i32) {
    this.set("fansNumber", Value.fromI32(value));
  }
}

export class WeeklyRewardPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeeklyRewardPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WeeklyRewardPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WeeklyRewardPool", id.toString(), this);
    }
  }

  static load(id: string): WeeklyRewardPool | null {
    return changetype<WeeklyRewardPool | null>(
      store.get("WeeklyRewardPool", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardPoolAmount(): BigInt {
    let value = this.get("rewardPoolAmount");
    return value!.toBigInt();
  }

  set rewardPoolAmount(value: BigInt) {
    this.set("rewardPoolAmount", Value.fromBigInt(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value!.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}

export class TokenDistribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDistribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDistribution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenDistribution", id.toString(), this);
    }
  }

  static load(id: string): TokenDistribution | null {
    return changetype<TokenDistribution | null>(
      store.get("TokenDistribution", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get albumPercents(): i32 {
    let value = this.get("albumPercents");
    return value!.toI32();
  }

  set albumPercents(value: i32) {
    this.set("albumPercents", Value.fromI32(value));
  }

  get weeklyPercents(): i32 {
    let value = this.get("weeklyPercents");
    return value!.toI32();
  }

  set weeklyPercents(value: i32) {
    this.set("weeklyPercents", Value.fromI32(value));
  }

  get teamPercents(): i32 {
    let value = this.get("teamPercents");
    return value!.toI32();
  }

  set teamPercents(value: i32) {
    this.set("teamPercents", Value.fromI32(value));
  }

  get artistPercents(): i32 {
    let value = this.get("artistPercents");
    return value!.toI32();
  }

  set artistPercents(value: i32) {
    this.set("artistPercents", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value!.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get albumsVoted(): Array<string> | null {
    let value = this.get("albumsVoted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set albumsVoted(value: Array<string> | null) {
    if (!value) {
      this.unset("albumsVoted");
    } else {
      this.set("albumsVoted", Value.fromStringArray(<Array<string>>value));
    }
  }

  get albumsCreated(): Array<string> | null {
    let value = this.get("albumsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set albumsCreated(value: Array<string> | null) {
    if (!value) {
      this.unset("albumsCreated");
    } else {
      this.set("albumsCreated", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalVotes(): i32 {
    let value = this.get("totalVotes");
    return value!.toI32();
  }

  set totalVotes(value: i32) {
    this.set("totalVotes", Value.fromI32(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    return value!.toBigInt();
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }
}

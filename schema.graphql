type Subject @entity {
  id: ID!
  address: Bytes!
  name: String!
  image: String!
  uri: String!

  "vote history"
  voteLogs: [VoteLog!]! @derivedFrom(field: "subject")

  "vote statistic per week"
  weeklyVotes: [SubjectWeeklyVote!]! @derivedFrom(field: "subject")

  "vote statistic per user"
  userVotes: [UserSubjectVote!]! @derivedFrom(field: "subject")

  "current number of votes that still holds"
  supply: BigInt!
  "total value of votes that still holds"
  totalVoteValue: BigInt!

  "volume of all votes"
  volumeVote: BigInt!
  "volume of all retreats"
  volumeRetreat: BigInt!
  "volume of both votes and retreats"
  volumeTotal: BigInt!

  # the subject created timestamp
  createdAt: Int!
  # the timestamp of last vote
  lastVoteAt: Int!

  creator: User!
  # the list of all fans
  fans: [User!]
  # the number of fans
  fansNumber: Int!
}

"weekly vote statistic by subject"
type SubjectWeeklyVote @entity {
  id: ID!
  # subject
  subject: Subject!
  # vote week
  week: Int!
  "number of votes"
  votes: BigInt!
  "number of retreats"
  retreats: BigInt!
  "volume of all votes"
  volumeVote: BigInt!
  "volume of all retreats"
  volumeRetreat: BigInt!
  "volume of both votes and retreats"
  volumeTotal: BigInt!
}

type User @entity {
  id: ID!
  address: Bytes!

  socials: [Social!]! @derivedFrom(field: "user")

  "subjects the user created"
  subjectsCreated: [Subject!]! @derivedFrom(field: "creator")

  "votes of current user"
  votes: [VoteLog!]! @derivedFrom(field: "voter")

  "weekly vote statistic of current user"
  weeklyVotes: [UserWeeklyVote!]! @derivedFrom(field: "user")

  "subject vote statistic of current user"
  subjectVotes: [UserSubjectVote!]! @derivedFrom(field: "user")

  "number of votes that still holds"
  holding: BigInt!

  "claimed reward"
  rewardClaimed: BigInt!
}

type Social @entity {
  id: String!
  user: User!
  "platform verification uri"
  uri: String!
  platform: String!
  "platform id"
  pid: String!
}

"user vote statistic per subject"
type UserSubjectVote @entity {
  id: ID!
  # user
  user: User!
  # subject
  subject: Subject!
  "number of votes that still holds"
  holding: BigInt!
  "number of votes"
  votes: BigInt!
  "number of retreats"
  retreats: BigInt!
  "volume of all votes"
  volumeVote: BigInt!
  "volume of all retreats"
  volumeRetreat: BigInt!
  "volume of both votes and retreats"
  volumeTotal: BigInt!
}

"user vote statistic by week"
type UserWeeklyVote @entity {
  id: ID!
  # user
  user: User!
  # vote week
  week: Int!
  "number of votes"
  votes: BigInt!
  "number of retreats"
  retreats: BigInt!
  "volume of all votes"
  volumeVote: BigInt!
  "volume of all retreats"
  volumeRetreat: BigInt!
  "volume of both votes and retreats"
  volumeTotal: BigInt!
}

"user vote statistic by subject and week"
type UserSubjectWeeklyVote @entity {
  id: ID!
  user: User!
  subject: Subject!
  week: Int!
  "number of votes that still holds"
  holding: BigInt!
}

type VoteLog @entity(immutable: true) {
  id: ID!
  # user
  voter: User!
  # subject
  subject: Subject!
  # vote time
  time: Int!
  # is vote or retreat
  isVote: Boolean!
  # amount of votes
  votes: BigInt!
  # amount of tokens
  value: BigInt!
  # latest supply
  supply: BigInt!
}

type Statistic @entity {
  "riffian"
  id: ID!
  "week of last vote"
  week: Int!
  # total vote token amount
  totalVoteValue: BigInt!
  # the number of total vote number
  totalVotes: BigInt!
}

type WeeklyStatistic @entity {
  id: ID!
  week: Int!
  "number of votes that still holds"
  holding: BigInt!
  "number of votes"
  votes: BigInt!
  "number of retreats"
  retreats: BigInt!
  "volume of all votes"
  volumeVote: BigInt!
  "volume of all retreats"
  volumeRetreat: BigInt!
  "volume of both votes and retreats"
  volumeTotal: BigInt!
}

type Domain @entity {
  # id = keccak256(namehash("doid") + keccak256(name))
  id: ID!
  # name of domain
  name: String
  # reserveNode = keccak256(namehash(".addr.reverse.") + keccak256(address))
  reserveNode: Bytes
  # owner of the domain
  owner: Account!
  # the address of the doimain
  addr: Account!
  # timestamp of created datetime
  createdAt: BigInt!
}

type Account @entity {
  id: ID!
  doimains: [Domain!]! @derivedFrom(field: "owner")
}

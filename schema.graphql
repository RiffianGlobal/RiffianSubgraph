type Album @entity {
  id: ID!
  address: Bytes!
  name: String!
  image: String!
  url: String!

  # votes
  votes: [VoteLog!]! @derivedFrom(field: "album")

  # weekly votes
  weeklyVotes: [AlbumWeeklyVote!]! @derivedFrom(field: "album")

  # user votes
  userVotes: [UserAlbumVote!]! @derivedFrom(field: "album")

  # total votes
  totalVotes: BigInt!
  # accumulated tokens of album vote
  totalVoteValue: BigInt!
  # accumulated tokens volume of album vote
  volumeVote: BigInt!
  # accumulated tokens volume of album retreat
  volumeRetreat: BigInt!
  # accumulated tokens volume of album vote and retreat
  volumeTotal: BigInt!

  # the album created timestamp
  createdAt: Int!
  # the timestamp of last vote
  lastVoteAt: Int!

  artist: User!
  # the list of all fans
  fans: [User!]
  # the number of fans
  fansNumber: Int!
}

type AlbumWeeklyVote @entity {
  id: ID!
  # album
  album: Album!
  # vote week
  week: Int!
  # number of votes
  votes: BigInt!
  # number of retreats
  retreats: BigInt!
  # accumulated tokens volume of album vote
  volumeVote: BigInt!
  # accumulated tokens volume of album retreat
  volumeRetreat: BigInt!
  # accumulated tokens volume of album vote and retreat
  volumeTotal: BigInt!
}

type WeeklyRewardPool @entity(immutable: true) {
  id: ID!
  # the total number of reward tokens
  rewardPoolAmount: BigInt!
  #
  createdAt: Int!
  updatedAt: Int!
}

type TokenDistribution @entity(immutable: true) {
  id: ID!
  albumPercents: Int!
  weeklyPercents: Int!
  teamPercents: Int!
  artistPercents: Int!
  createdAt: Int!
  updatedAt: Int!
}

type User @entity {
  id: ID!
  address: Bytes!

  # albums the user vote
  albumsVoted: [Album!]
  # albums the user create
  albumsCreated: [Album!]

  # votes
  votes: [VoteLog!]! @derivedFrom(field: "voter")

  # weekly votes
  weeklyVotes: [UserWeeklyVote!]! @derivedFrom(field: "user")

  # album votes
  albumVotes: [UserAlbumVote!]! @derivedFrom(field: "user")

  # number of votes that still hold
  totalVotes: BigInt!
  # total rewards
  totalRewards: BigInt!
}

type UserAlbumVote @entity {
  id: ID!
  # user
  user: User!
  # album
  album: Album!
  # number of votes that still hold
  holding: BigInt!
  # number of votes
  votes: BigInt!
  # number of retreats
  retreats: BigInt!
  # accumulated tokens volume of album vote
  volumeVote: BigInt!
  # accumulated tokens volume of album retreat
  volumeRetreat: BigInt!
  # accumulated tokens volume of album vote and retreat
  volumeTotal: BigInt!
}

type UserWeeklyVote @entity {
  id: ID!
  # user
  user: User!
  # vote week
  week: Int!
  # number of votes
  votes: BigInt!
  # number of retreats
  retreats: BigInt!
  # accumulated tokens volume of album vote
  volumeVote: BigInt!
  # accumulated tokens volume of album retreat
  volumeRetreat: BigInt!
  # accumulated tokens volume of album vote and retreat
  volumeTotal: BigInt!
}

type VoteLog @entity(immutable: true) {
  id: ID!
  # user
  voter: User!
  # album
  album: Album!
  # vote time
  time: Int!
  # is vote or retreat
  isVote: Boolean!
  # amount of votes
  votes: BigInt!
  # amount of tokens
  value: BigInt!
  # latest supply
  supply: BigInt!
}

type Statistic @entity {
  id: ID!
  # week of last vote
  week: Int!
  # total vote token amount
  totalVoteValue: BigInt!
  # the number of total vote number
  totalVoteNumber: BigInt!
}
